/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ArrayType<T> = ArrayTypeImpl<T> extends (infer U)[]
  ? U[]
  : ArrayTypeImpl<T>;

export type ArrayTypeImpl<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S[], I[], U[]>
  : T[];

export type ConstraintType = "min_free_periods" | "no_back_to_back" | "no_double_booking" | "no_repeat_subject" | "specific_room";

export type DayOfWeek = "Friday" | "Monday" | "Saturday" | "Sunday" | "Thursday" | "Tuesday" | "Wednesday";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface ClassSubjects {
  classId: number | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  requiresSpecificRoom: Generated<boolean | null>;
  specificRoom: string | null;
  subject: string;
  updatedAt: Generated<Timestamp | null>;
  weeklyFrequency: number;
}

export interface SchedulingConstraints {
  constraintDescription: string | null;
  constraintType: ConstraintType;
  constraintValue: number | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  schoolConfigId: number | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface SchoolConfig {
  createdAt: Generated<Timestamp | null>;
  endTime: string;
  id: Generated<number>;
  name: string;
  periodDuration: number;
  startTime: string;
  totalClassrooms: number;
  totalPeriods: number;
  updatedAt: Generated<Timestamp | null>;
  workingDays: ArrayType<DayOfWeek>;
}

export interface StudentClasses {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  name: string;
  schoolConfigId: number | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface TeacherAvailability {
  createdAt: Generated<Timestamp | null>;
  dayOfWeek: DayOfWeek;
  id: Generated<number>;
  isAvailable: Generated<boolean | null>;
  periodNumber: number;
  teacherId: number | null;
}

export interface Teachers {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  maxHoursPerDay: number;
  name: string;
  preferredDays: ArrayType<DayOfWeek> | null;
  schoolConfigId: number | null;
  subjects: string[];
  updatedAt: Generated<Timestamp | null>;
}

export interface Timetables {
  conflictsResolved: Generated<number | null>;
  createdAt: Generated<Timestamp | null>;
  generationStatus: Generated<string | null>;
  generationTimestamp: Generated<Timestamp | null>;
  id: Generated<number>;
  schoolConfigId: number | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface TimetableSlots {
  classId: number | null;
  classroom: string | null;
  createdAt: Generated<Timestamp | null>;
  dayOfWeek: DayOfWeek;
  id: Generated<number>;
  isManualOverride: Generated<boolean | null>;
  periodNumber: number;
  subject: string;
  teacherId: number | null;
  timetableId: number | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  classSubjects: ClassSubjects;
  schedulingConstraints: SchedulingConstraints;
  schoolConfig: SchoolConfig;
  studentClasses: StudentClasses;
  teacherAvailability: TeacherAvailability;
  teachers: Teachers;
  timetables: Timetables;
  timetableSlots: TimetableSlots;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const DayOfWeekArrayValues: [DayOfWeek, ...DayOfWeek[]] = ["Friday","Monday","Saturday","Sunday","Thursday","Tuesday","Wednesday"];
export const ConstraintTypeArrayValues: [ConstraintType, ...ConstraintType[]] = ["min_free_periods","no_back_to_back","no_double_booking","no_repeat_subject","specific_room"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case.